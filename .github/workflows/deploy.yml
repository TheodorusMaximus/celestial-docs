name: Deploy to Netlify

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build site
        run: npm run build

      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          configPath: './lighthouserc.json'
          uploadArtifacts: true
          temporaryPublicStorage: true

      - name: Deploy to Netlify
        uses: nwtgck/actions-netlify@v2.1
        with:
          publish-dir: './dist'
          production-branch: main
          github-token: ${{ secrets.GITHUB_TOKEN }}
          deploy-message: "Deploy from GitHub Actions"
          enable-pull-request-comment: false
          enable-commit-comment: true
          overwrites-pull-request-comment: true
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}

      - name: Comment Lighthouse results
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            // Try to read Lighthouse results
            try {
              const resultsPath = path.join(process.cwd(), '.lighthouseci');
              if (fs.existsSync(resultsPath)) {
                const files = fs.readdirSync(resultsPath);
                const reportFile = files.find(file => file.endsWith('.json'));
                
                if (reportFile) {
                  const report = JSON.parse(fs.readFileSync(path.join(resultsPath, reportFile), 'utf8'));
                  const scores = {
                    performance: Math.round(report.categories.performance.score * 100),
                    accessibility: Math.round(report.categories.accessibility.score * 100),
                    'best-practices': Math.round(report.categories['best-practices'].score * 100),
                    seo: Math.round(report.categories.seo.score * 100)
                  };
                  
                  const comment = `
            ## üöÄ Lighthouse Performance Report
            
            | Category | Score |
            |----------|-------|
            | üöÄ Performance | ${scores.performance}/100 |
            | ‚ôø Accessibility | ${scores.accessibility}/100 |
            | üõ°Ô∏è Best Practices | ${scores['best-practices']}/100 |
            | üîç SEO | ${scores.seo}/100 |
            
            *Report generated for commit ${context.sha.substring(0, 7)}*
                  `;
                  
                  github.rest.issues.createComment({
                    issue_number: context.issue.number,
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    body: comment
                  });
                }
              }
            } catch (error) {
              console.log('Could not generate Lighthouse comment:', error.message);
            }