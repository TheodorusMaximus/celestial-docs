---
import type { HeadingHierarchy, HeadingProps } from "@/lib/types";
import { createHeadingHierarchy } from "@/lib/utils";

const { headings } = Astro.props as HeadingProps;
const toc: HeadingHierarchy[] = createHeadingHierarchy(headings ?? []);
const hasToC = toc.length > 1;

// To pass the tailwindcss classes to the astro component
const { class: className } = Astro.props;
---

{
  hasToC && (
    <div class:list={["relative bg-muted/30 rounded-lg border border-border/40 transition-all duration-300", className]} id="toc-container">
      <!-- Expanded TOC -->
      <div id="toc-expanded">
        <button 
          class="w-full text-left p-4 text-base font-semibold text-foreground border-none flex items-center justify-between gap-2 hover:bg-muted/50 transition-colors duration-200 rounded-lg"
          onclick="toggleTOC()"
          id="toc-toggle"
        >
          <div class="flex items-center gap-2">
            <span class="w-1 h-4 bg-primary rounded-full"></span>
            On This Page
          </div>
          <svg 
            class="w-4 h-4 transition-transform duration-200" 
            id="toc-chevron"
            fill="none" 
            stroke="currentColor" 
            viewBox="0 0 24 24"
          >
            <polyline points="6,9 12,15 18,9"></polyline>
          </svg>
        </button>
        <div class="px-4 pb-4" id="toc-content">
          <ul class="list-none m-0 space-y-1">
            {toc.map((heading) => (
              <li class="relative">
                <a 
                  href={`#${heading.slug}`} 
                  class={`
                    block text-sm py-1.5 px-2 rounded-md transition-all duration-200 no-underline
                    hover:bg-background/60 hover:text-foreground
                    ${heading.depth === 2 
                      ? "font-medium text-foreground" 
                      : "text-muted-foreground ml-3 text-xs"
                    }
                  `}
                >
                  {heading.depth > 2 && <span class="mr-2 text-muted-foreground/60">â€¢</span>}
                  {heading.text}
                </a>
              </li>
            ))}
          </ul>
        </div>
      </div>

      <!-- Collapsed Widget -->
      <div id="toc-widget" class="hidden">
        <button 
          class="p-3 text-sm font-semibold text-foreground border-none flex items-center gap-2 hover:bg-muted/50 transition-all duration-200 rounded-lg w-full"
          onclick="toggleTOC()"
          title="Expand Table of Contents"
        >
          <svg 
            class="w-4 h-4" 
            fill="none" 
            stroke="currentColor" 
            viewBox="0 0 24 24"
          >
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"></path>
          </svg>
          <span class="text-xs">TOC</span>
          <svg 
            class="w-3 h-3 ml-auto" 
            fill="none" 
            stroke="currentColor" 
            viewBox="0 0 24 24"
          >
            <polyline points="15,18 9,12 15,6"></polyline>
          </svg>
        </button>
      </div>
    </div>
  )
}

<script>
  function toggleTOC() {
    const tocExpanded = document.getElementById('toc-expanded');
    const tocWidget = document.getElementById('toc-widget');
    const tocSidebar = document.getElementById('toc-sidebar');
    const mainContent = document.getElementById('main-content');
    
    if (tocExpanded && tocWidget && tocSidebar && mainContent) {
      const isCollapsed = tocExpanded.style.display === 'none';
      
      if (isCollapsed) {
        // Expand TOC - show full version
        tocExpanded.style.display = 'block';
        tocWidget.style.display = 'none';
        localStorage.setItem('toc-collapsed', 'false');
        
        // Restore original layout (1/4 sidebar)
        tocSidebar.classList.remove('lg:w-16', 'lg:w-20');
        tocSidebar.classList.add('lg:w-1/4');
        mainContent.classList.remove('lg:w-3/4', 'lg:w-4/5');
        mainContent.classList.add('lg:w-1/2');
      } else {
        // Collapse to widget - show compact version
        tocExpanded.style.display = 'none';
        tocWidget.style.display = 'block';
        localStorage.setItem('toc-collapsed', 'true');
        
        // Make sidebar very narrow (just the widget)
        tocSidebar.classList.remove('lg:w-1/4');
        tocSidebar.classList.add('lg:w-20'); // About 80px wide
        mainContent.classList.remove('lg:w-1/2');
        mainContent.classList.add('lg:w-4/5'); // About 80% width
      }
    }
  }

  // Restore previous state on page load
  document.addEventListener('DOMContentLoaded', function() {
    const tocExpanded = document.getElementById('toc-expanded');
    const tocWidget = document.getElementById('toc-widget');
    const tocSidebar = document.getElementById('toc-sidebar');
    const mainContent = document.getElementById('main-content');
    const isCollapsed = localStorage.getItem('toc-collapsed') === 'true';
    
    if (tocExpanded && tocWidget && tocSidebar && mainContent && isCollapsed) {
      // Apply collapsed widget state
      tocExpanded.style.display = 'none';
      tocWidget.style.display = 'block';
      
      // Make sidebar very narrow
      tocSidebar.classList.remove('lg:w-1/4');
      tocSidebar.classList.add('lg:w-20');
      mainContent.classList.remove('lg:w-1/2');
      mainContent.classList.add('lg:w-4/5');
    }
  });

  // Make the function globally available
  (window as any).toggleTOC = toggleTOC;
</script>
